---

interface Props {
    title: string;
}

const { title} = Astro.props;
---

<div class="absolute m-auto left-0 rounded-3xl bg-[#ffffff4d]  z-10 h-screen w-screen justify-center items-center hidden" data-is-open="false">
    <div class="text-center absolute m-auto p-4 bg-white border rounded-3xl">
        <h1 class="text-xl p-1">{title}</h1>
        <p class="text-xs p-3">El usuario que ingresaste ya existe,<br/>si este es tu usuario y deseas continuar da clic en OK,<br/> de no ser as√≠, da clic en Volver e intenta con <br/> un nombre de usuario diferente</p>
        <button class="px-5 rounded-3xl bg-sky-300 text-white" data-button>OK</button>
        <button class="px-5 rounded-3xl bg-sky-300 text-white" back-button>Volver</button>
    </div>
</div>

<script>
    import { isDialogOpen } from "@/store/store";

	const errorP = document.querySelector("[data-wrong]") as HTMLParagraphElement;
    const dialog = document.querySelector("[data-is-open]");
    const button = document.querySelector("[back-button]");
    const button_data = document.querySelector("[data-button]");
    const form = document.getElementById("signin-form") as HTMLFormElement;

    const handleSignIn = async (e: Event) => {
        isDialogOpen.set(false);

		const res = await fetch("/api/auth/signin", {
			method: "POST",
			body: new FormData(form)
		});

		const {error, data} = await res.json();

        if(error){
			if(errorP){
				errorP.classList.remove("hidden");
				errorP.innerHTML = error.message;
			}
			return
		}

		let isUserProfileComplete = false;
		let isFeedDone = false;
		let isRmitDone = false;
		let isIriDone = false;
		let isMfqADone = false;
		let isMfqBDone = false;

        
		isUserProfileComplete = data.user.profile_completed;
		isFeedDone = data.user.feed_done;
		isRmitDone = data.user.RMIT_done;
		isIriDone = data.user.IRI_done;
		isMfqADone = data.user.MFQ_1_done;
		isMfqBDone = data.user.MFQ_2_done;

		if(!isUserProfileComplete){
			window.location.href = "/profile";
			return;
		}

		if(!isFeedDone){
			window.location.href = "/instructions";
			return;
		}

		if(!isRmitDone){
			window.location.href = "/instructions-01";
			return;
		}

		if(!isIriDone){
			window.location.href = "/instructions-02";
			return;
		}

		if(!isMfqADone){
			window.location.href = "/instructions-03";
			return;
		}

		if(!isMfqBDone){
			window.location.href = "/instructions-04";
			return;
		}

		window.location.href = "/end";

	}


    button?.addEventListener("click", () => {
        isDialogOpen.set(false);
    })
    button_data?.addEventListener("click", handleSignIn);
    
    isDialogOpen.subscribe(value => {
        if(value){
            dialog!.classList.remove("hidden");
            dialog!.classList.add("flex");
        }else{
            dialog!.classList.add("hidden");
            dialog!.classList.remove("flex");
        }
    })
</script>