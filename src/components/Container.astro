---
import { Image } from "astro:assets";
//import placeholder from "@/assets/reactions/img-placeholder.jpg"
import placeholder from "@/assets/stimuli/1.jpg"
import placeholder2 from "@/assets/stimuli/2.jpg"
import EmojiBar from "./EmojiBar.astro";
---

<div class="w-full h-full mx-0 my-auto">
    <article class="w-full h-[80%] content-center my-auto mx-0  select-none">
        <picture>
            <img draggable="false" src={placeholder.src} alt="stimulus"/>
        </picture>
    </article>
    <span class="z-[-1]">
        No hay más estimulos a los que reaccionar... <br />
        Vuelve a intentarlo más tarde
    </span>

    <EmojiBar />
</div>

<style>
    .go-left {
        transform: translateX(-150%) rotate(-30deg) !important;
    }

    .go-right {
        transform: translateX(150%) rotate(30deg) !important;
    }

    .go-left,
    .go-right {
        transition: transform .3s ease, rotate .3s ease;
    }

    .reset {
        transition: transform .3s ease;
        transform: translateX(0) !important;
      }
</style>

<script>
    const DECISION_THRESHOLD = 75

    let isAnimating = false
    let pullDeltaX = 0 // distance from the card being dragged

    function startDrag(event: any) {
    if (isAnimating) return

    // get the first article element
    const actualCard = event.target.closest('article')
    if (!actualCard) return

    // get initial position of mouse or finger
    const startX = event.pageX ?? event.touches[0].pageX

    // listen the mouse and touch movements
    document.addEventListener('mousemove', onMove)
    document.addEventListener('mouseup', onEnd)

    document.addEventListener('touchmove', onMove, { passive: true })
    document.addEventListener('touchend', onEnd, { passive: true })

    function onMove(event: any) {
        // current position of mouse or finger
        const currentX = event.pageX ?? event.touches[0].pageX

        // the distance between the initial and current position
        pullDeltaX = currentX - startX

        // there is no distance traveled in X axis
        if (pullDeltaX === 0) return

        // change the flag to indicate we are animating
        isAnimating = true

        // calculate the rotation of the card using the distance
        const deg = pullDeltaX / 14

        // apply the transformation to the card
        actualCard.style.transform = `translateX(${pullDeltaX}px) rotate(${deg}deg)`

        // change the cursor to grabbing
        actualCard.style.cursor = 'grabbing'

        // change opacity of the choice info
        /* const opacity = Math.abs(pullDeltaX) / 100
        const isRight = pullDeltaX > 0

        const choiceEl = isRight
        ? actualCard.querySelector('.choice.like')
        : actualCard.querySelector('.choice.nope')

        choiceEl.style.opacity = opacity */
    }

    function onEnd(event: any) {
        // remove the event listeners
        document.removeEventListener('mousemove', onMove)
        document.removeEventListener('mouseup', onEnd)

        document.removeEventListener('touchmove', onMove)
        document.removeEventListener('touchend', onEnd)

        // saber si el usuario tomo una decisión
        const decisionMade = Math.abs(pullDeltaX) >= DECISION_THRESHOLD

        if (decisionMade) {
        const goRight = pullDeltaX >= 0

        // add class according to the decision
        actualCard.classList.add(goRight ? 'go-right' : 'go-left')
        actualCard.addEventListener('transitionend', () => {
            actualCard.remove()
        })
        } else {
        actualCard.classList.add('reset')
        actualCard.classList.remove('go-right', 'go-left')

/*         actualCard.querySelectorAll('.choice').forEach((choice: any) => {
            choice.style.opacity = 0
        }) */
        }

        // reset the variables
        actualCard.addEventListener('transitionend', () => {
        actualCard.removeAttribute('style')
        actualCard.classList.remove('reset')

        pullDeltaX = 0
        isAnimating = false
        })

        // reset the choice info opacity
        actualCard
        .querySelectorAll(".choice")
        .forEach((el: any) => (el.style.opacity = 0));
    }
    }

    document.addEventListener('mousedown', startDrag)
    document.addEventListener('touchstart', startDrag, { passive: true })
</script>
